name: Security Testing

on: [push, pull_request]

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup environments
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Install Dependencies for both projects
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./ex-arbete

      - name: Install Backend Dependencies
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      # Install Snyk CLI globally
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Run Snyk scans
      - name: Snyk Frontend Scan
        id: snyk_frontend
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          json: true
          args: --file=ex-arbete/package.json

      - name: Snyk Backend Scan
        id: snyk_backend
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          json: true
          args: --file=./Examensarbete.csproj

      # Results Check
      # - name: Check Snyk Results
      #   if: always()
      #   run: |
      #     echo "# Snyk Security Findings" >> $GITHUB_STEP_SUMMARY

      #     # Frontend Results
      #     echo "## Frontend Scan" >> $GITHUB_STEP_SUMMARY
      #     if [[ "${{ steps.snyk_frontend.outcome }}" == "failure" ]]; then
      #       echo "⚠️ Vulnerabilities found in frontend dependencies" >> $GITHUB_STEP_SUMMARY
      #       echo "${{ steps.snyk_frontend.outputs.snyk-test-output }}" >> $GITHUB_STEP_SUMMARY
      #     else
      #       echo "✅ No vulnerabilities found in frontend dependencies" >> $GITHUB_STEP_SUMMARY
      #     fi

      #     # Backend Results
      #     echo "## Backend Scan" >> $GITHUB_STEP_SUMMARY
      #     if [[ "${{ steps.snyk_backend.outcome }}" == "failure" ]]; then
      #       echo "⚠️ Vulnerabilities found in backend dependencies" >> $GITHUB_STEP_SUMMARY
      #       echo "${{ steps.snyk_backend.outputs.snyk-test-output }}" >> $GITHUB_STEP_SUMMARY
      #     else
      #       echo "✅ No vulnerabilities found in backend dependencies" >> $GITHUB_STEP_SUMMARY
      #     fi

      - name: OWASP ZAP Baseline Scan
        id: zap_scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: "https://www.example.com"
          allow_issue_writing: false
        continue-on-error: true

      - name: Check ZAP Scan Results
        if: always()
        run: |
          if [[ "${{ steps.zap_scan.outputs.alerts }}" == *"WARN-NEW:"* ]]; then
            echo "::warning::⚠️ OWASP ZAP SECURITY WARNINGS FOUND ⚠️"
            echo "::warning::----------------------------------------"
            echo "${{ steps.zap_scan.outputs.alerts }}" | grep "WARN-NEW:" | while read -r line; do
              echo "::warning::$line"
            done
            echo "::warning::----------------------------------------"
            echo "::warning::Total Warnings: $(echo "${{ steps.zap_scan.outputs.alerts }}" | grep -c "WARN-NEW:")"
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=AdamOhlson1_Ex-arbete-test2
            -Dsonar.organization=adamohlson1

      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            ./*.txt
            ./*.html
            ./*.json
